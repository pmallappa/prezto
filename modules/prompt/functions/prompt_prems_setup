##
## Authour: Prem Mallappa <prem.mallappa@gmail.com
##
# Heavily derived from agnoster/mudasobwa/
# Credits to original authors.
#
#
## Setup usual git info

zstyle ':vcs_info:*+set-message:*' hooks __prompt_vcs
function +vi-__prompt_vcs() {
    if [ -n $vcs ]; then
	zstyle ':prezto:module:vcs' type "$vcs"	
    fi

    case "$vcs" in
	git*)
	    if (($+functions[git-info] )); then
		if zstyle -t ':prezto:module:vcs' run 'yes'; then
		    git-info
		    zstyle ':prezto:module:vcs' run 'no'
		fi
	    fi
	    ;;
	hg*)
	    ;;
	default)
	    ;;
    esac
}

zstyle ':vcs_info:*+pre-get-data:*' hooks __pre-get-data
function +vi-__pre-get-data() {
    # Only Git and Mercurial support and need caching. Abort if any other
    # VCS is used.
    [[ "$vcs" != git && "$vcs" != hg ]] && return

    # If the shell just started up or we changed directories (or for other
    # custom reasons) we must run vcs_info.

    if zstyle -t ':prezto:module:vcs' run ; then
        return
    fi

    # If a git/hg command was run then run vcs_info as the status might
    # need to be updated.
    case "$(fc -ln $(($HISTCMD-1)))" in
        git* | hg*)
	    zstyle ':prezto:module:vcs' run 'yes'
            ;;
        default)
           zstyle ':prezto:module:vcs' run 'no'
            ;;
    esac
}

# function ___trim() {
#     local var=$@
#     var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
#     var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
#     echo -n "$var"
# }

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
function prompt_segment() {
    local bg fg
    [[ -n $1 ]] && bg=${BG[$1]} || bg=${BG[none]}
    [[ -n $2 ]] && fg=${FG[$2]} || fg=${FG[none]}
    if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
	echo -n  " %{${bg}${FG[$CURRENT_BG]}%}${SEGMENT_SEPARATOR}%{${fg}%} "
    else
	echo -n  "%{$bg%}%{$fg%} "
    fi
    CURRENT_BG="$1"
    [[ -n $3 ]] && echo -n $3
}

function prompt_end {
    if [[ -n $CURRENT_BG ]]; then
	echo -n  " %{${BG[none]}$FG[$CURRENT_BG]%}$SEGMENT_SEPARATOR"
    else
	echo -n  "%{${BG[none]}%}"
    fi
    echo -n  "%{${FG[none]}%}"
    CURRENT_BG=''
}

# Begin an right segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
function prompt_rsegment() {
    local bg fg
    [[ -n $1 ]] && bg=${BG[$1]} || bg=${BG[none]}
    [[ -n $2 ]] && fg=${FG[$2]} || fg=${FG[none]}
    if [[ $1 != $CURRENT_BG ]]; then
	echo -n  " %{${FG[$1]}%}${SEGMENT_RSEPARATOR}%{${bg}%}%{${fg}%} "
    else
	echo -n  "%{$bg%}%{$fg%} "
    fi
    CURRENT_BG=$1
    [[ -n $3 ]] && echo -n  $3
}

# End the rprompt, closing any open segments
function prompt_rend() {
    if [[ -n $CURRENT_BG ]]; then
	echo -n  " %{${BG[none]}$FG[$CURRENT_BG]%}"
    else
	echo -n  "%{${BG[none]}%}"
    fi
    echo -n  "%{${FG[none]}%}"
    CURRENT_BG=''
}

function prompt_dir {
    prompt_segment 8 7 "%~"
}

function prompt_vcs {
    local vtype
    zstyle -s ':prezto:module:vcs' type 'vtype'
    case $vtype in
	git*)
	    local br=$git_info[branch]
	    # Here we detect if we are in a git repo
	    if [[ -n $br  ]]; then
		local ref dirty
		#prompt_rsegment blue black " git "
		if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
		    #dirty=$(parse_git_dirty)
		    dirty=$git_info[status]
		    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
		    prompt_rsegment blue white "$git_info[branch] ⭠"
		    if (( ${#git_info[remote]} > 0 )); then
			prompt_rsegment 245 16 "$git_info[remote]"
		    fi
		    if [[ -z $dirty ]]; then
			prompt_rsegment 237 120 "✔"
		    else
			prompt_rsegment 237 197 "$git_info[status]"
		    fi
		fi
	    fi
	    ;;
	hg*)
	    prompt_rsegment magenta white "$vtype"
	    prompt_rsegment blue black "$vcs_info_msg_0_"
	    ;;
	default)
	    ;;
    esac
}

function prompt_host {
    local hostcolor
    local host="$(hostname)"
    fg=16
    case $host in
	pmallappa-server)
            bg=130
	    fg=white;;
	pmallappa-laptop)
	    bg=166;;
	pmallappa-test)
            bg=cyan;;
	imac* | iMac*)
	    bg=magenta ;;
	*-vm)
            bg=$(($RANDOM%256)) ;;
	*)
            bg=gray  ;;
    esac
    #CURRENT_BG="$bg"
    prompt_segment $bg $fg $host
}


function prompt_status() {
    local symbols
    symbols=()
    [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}✘ [$RETVAL]"
    [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}⚡"
    [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}⚙"
    
    [[ -n "$symbols" ]] && prompt_rsegment black black "$symbols"
}

function prompt_padding {
    local prompt_line_1a
    local prompt_line_1b
    local zero='%([BSUbfksu]|([FB]|){*})'
    prompt_line_1a="$(prompt_host)$(prompt_dir)"
    prompt_line_1a+="$(prompt_end)"

    prompt_line_1b="$(prompt_vcs)"
    prompt_line_1b+="$(prompt_rend)"
    

    local prompt_line_1a_width=${#${(S%%)prompt_line_1a//$~zero}}
    local prompt_line_1b_width=${#${(S%%)prompt_line_1b//$~zero}}
    if (( prompt_line_1b_width > 0 )); then
	prompt_line_1b_width=$(( prompt_line_1b_width + 1 ))
    fi
    
    local prompt_padding_size=$(( COLUMNS
            - prompt_line_1a_width
            - prompt_line_1b_width ))
    # Try to fit in long path and user@host.
    if (( prompt_padding_size > 0 )); then
	local prompt_padding
	prompt_padding=${(l:${prompt_padding_size}:: :)_empty_zz}
	echo -n "$prompt_padding"
    fi
}

function build_prompt {
    RETVAL=$?
    prompt_host
    prompt_dir
    prompt_end
    prompt_padding
    prompt_vcs
    prompt_rend
}

function build_rprompt {
    RETVAL=$?
    #prompt_git
    prompt_status
    prompt_rend
}

# Must run vcs_info when changing directories.
function _prompt_prems_chpwd() {
    case "$(fc -ln $(($HISTCMD-1)))" in
        hg*|git*)
            zstyle ':prezto:module:vcs' run 'yes'
            ;;
        default)
            zstyle ':prezto:module:vcs' run 'no'
            ;;
    esac
    vcs_info
}

function _prompt_prems_precmd {
    #if zstyle -t ':prezto:module:vcs' run ; then
    #	if (( $+functions[vcs_info] )); then
    	    vcs_info
    #	fi
    #fi
}

function __setup_vcs {

    local enabled
    local disabled
    zstyle -a ':prezto:module:git' enabled 'enabled'
    zstyle -a ':prezto:module:git' disabled 'disabled'

    zstyle ':vcs_info:*' disable $disabled
    zstyle ':vcs_info:*' enable $enabled

}

function __setup_vcs_style {
    zstyle ':vcs_info:git*' formats '%b'
    zstyle ':vcs_info:(hg*|git*):*' get-revision true
    zstyle ':vcs_info:*' actionformats '{|%s%f%c: %b|%a}'

    # This includes git-svn, hg-svn, hg-git etc
    zstyle ':vcs_info:(hg*|git*):*' get-revision true
    zstyle ':vcs_info:(hg*|git*):*' check-for-changes true

    ### for Mercurial
    () {
	# rev+changes branch misc
	zstyle ':vcs_info:hg*' formats "[%i%u %b %m]"
	zstyle ':vcs_info:hg*' actionformats "(%a)[%i%u %b %m]"
	zstyle ':vcs_info:hg*:netbeans' use-simple true
	zstyle ':vcs_info:hg*:*' get-bookmarks true
	zstyle ':vcs_info:hg*:*' get-mq true
	zstyle ':vcs_info:hg*:*' get-unapplied true
	zstyle ':vcs_info:hg*:*' patch-format "mq(%g):%n/%c %p"
	zstyle ':vcs_info:hg*:*' nopatch-format "mq(%g):%n/%c %p"
	zstyle ':vcs_info:hg*:*' unstagedstr "+"
	zstyle ':vcs_info:hg*:*' hgrevformat "%r" # only show local rev.
	zstyle ':vcs_info:hg*:*' branchformat "%b" # only show branch
    }
    
    ### Mark individual style
    () {
	zstyle ':prezto:module:git:info' verbose 'yes'

	zstyle ':prezto:module:git:info:action' format ':%s'
	zstyle ':prezto:module:git:info:added' format  '✚ '
	zstyle ':prezto:module:git:info:ahead' format  '⬆ '
	zstyle ':prezto:module:git:info:behind' format  '⬇ '
	zstyle ':prezto:module:git:info:branch' format '%b'
	zstyle ':prezto:module:git:info:remote' format '%R'
	zstyle ':prezto:module:git:info:commit' format ':%.7c'
	zstyle ':prezto:module:git:info:deleted' format  '✖ '
	zstyle ':prezto:module:git:info:modified' format  '✱ '
	zstyle ':prezto:module:git:info:position' format ':%p'
	zstyle ':prezto:module:git:info:renamed' format  '➜ '
	zstyle ':prezto:module:git:info:stashed' format  '✭ '
	zstyle ':prezto:module:git:info:unmerged' format  '═ '
	zstyle ':prezto:module:git:info:untracked' format '' 

	zstyle ':prezto:module:git:info:keys' format \
	    'added'     '%a' \
	    'deleted'   '%d' \
	    'modified'  '%m' \
	    'renamed'   '%r' \
	    'untracked' '%u' \
	    'branch'    '%b' \
	    'remote'    '%R' \
	    'status'    '%S%A%B%U%I%C%a%d%m%r%u'
    }
}

function prompt_prems_setup {
    # Load required functions.
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info    

    setopt LOCAL_OPTIONS
    unsetopt XTRACE KSH_ARRAYS

    prompt_opts=(cr percent subst)

    local NL=$'\n'

    __setup_vcs
    __setup_vcs_style

    # Initially set vcs run to yes
    zstyle ':prezto:module:vcs' run 'yes'


    zstyle ':prezto:module:editor:info:keymap:primary' format "%F{red}⊳%F{yellow}⊳%F{green}⊳%f "

    # Add hook for calling git-info before each command.
    if [[ ${ZSH_VERSION} > 4.3.0 ]]; then
	add-zsh-hook precmd _prompt_prems_precmd
	add-zsh-hook chpwd _prompt_prems_chpwd
    else
	PROMPT="[$FG[046]%n${RST}:$FX[bold]$FG[240]%~${RST}$vcs_info_msg_0_] $NL$FG[046]%m%f %% "
	return
    fi

    CURRENT_BG='NONE'
    SEGMENT_SEPARATOR='⮀'
    SEGMENT_RSEPARATOR='⮂'
    
    PROMPT='%{%f%b%k%}$(build_prompt)$NL${editor_info[keymap]} '
    RPROMPT=' %{%f%b%k%}$(build_rprompt)'

    ## remove all that one-time definitions
    #unfunction __setup_vcs
    #unfunction __setup_vcs_style
}

prompt_prems_setup "$@"


##
# Local Variables:
# mode: shell-script
# End:
