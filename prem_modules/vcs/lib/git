#autoload add-zsh-hooks
autoload -Uz vcs_info

###
zstyle ':vcs_info:git*:*' get-revision true
zstyle ':vcs_info:git*:*' check-for-changes true
zstyle ':vcs_info:git*' use-simple true			# hash changes branch misc


### check-for-changes just in some places ####################################
# `~/work/'.
# There are the projects I want the information for most. They are also
# a lot smaller than the linux kernel so the information can be retrieved
# instantaneously - even on my old laptop at 600MHz. And the following code
# enables `check-for-changes' only in that subtree:
zstyle -e ':vcs_info:git:*' \
    check-for-changes 'estyle-cfc && reply=( true ) || reply=( false )'

function estyle-cfc() {
    local d
    local -a cfc_dirs
    cfc_dirs=(
        ${HOME}/work/*(/)
    )

    for d in ${cfc_dirs}; do
        d=${d%/##}
        [[ $PWD == $d(|/*) ]] && return 0
    done
    return 1
}

# Do not want to dray all values behind, if the user changes
# directories, we may change from one VCS to another
function +vi-clear-hook-array() {
	my_hook_com=()
}

# Useful to test values outside the hooks
function +vi-git-init-hook-array() {
    my_hook_com=("${(@kv)hook_com}")
    for key in ${(k)git_info}; do
	my_hook_com[$key]=${git_info[$key]}
    done
}

# ============================================================================
# Hooks
# ============================================================================
# Some silly things to remember:
# All vcs_info hooks need the '+vi-' prefix in there definition
# Repetitive calls to 'hooks' overwrite each other. List all hook functions for ai
# hook in one call (I wasted time with that one).
# Also, vcs_info_hookadd can be used the register the hooks statically (independent
# from context). This HAS to be called after vcs_info and not here.
# 	vcs_info_hookadd set-message git-st git-remotebranch

#	zstyle ':vcs_info:git*+set-message:*' hooks \
#		init-hook-array \
#		git-remotebranch \
#		show-hook-array

# Post-backend is called once, whereas set-message is called on every
# message vcs_info_msg_X_. So save a few resources
zstyle ':vcs_info:*+pre-get-data:*' hooks \
	clear-hook-array

zstyle ':vcs_info:git*+post-backend:*' hooks \
    git-remotebranch \
    git-prompt-info \
    git-init-hook-array \
    #show-hook-array

function +vi-git-prompt-info() {
    # enable for profiling this function
    #PS4='$(date "+%s.%N ($LINENO) + ")'
    if (( $+function[git-info] )); then
        git-info
    fi
    git-info
    unset _git_info_executing
}

# Turns off git-info for the current repository.
function _git-info-abort {
  if ! is-true "$_git_info_executing"; then
    return 1
  fi

  cat >&2 <<EOF


Gathering status for certain repositories is time intensive.
By pressing CTRL + C, you have turned off prompt Git status
for this repository.

To revert, execute:
  git config --bool prompt.showinfo true

EOF

  unset _git_info_executing
  git config --bool prompt.showinfo false
  git-info
  return 0
}
add-zsh-trap INT _git-info-abort


# Local Variables:
#    mode:shell-script
# End:
